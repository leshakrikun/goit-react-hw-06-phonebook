{"version":3,"sources":["components/PhoneBook/phonebook.module.css","components/Contacts/contacts.module.css","components/Filter/filter.module.css","redux/store.js","components/PhoneBook/phoneBook.js","components/Contacts/contacts.js","components/Filter/filter.js","App.js","index.js"],"names":["module","exports","persistConfig","key","storage","blacklist","initialState","contacts","JSON","parse","window","localStorage","getItem","contactsSlice","createSlice","name","reducers","addContacts","state","action","payload","deleteContact","filter","id","filterContact","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","persistReducer","persistor","persistStore","Phonebook","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","handleChange","e","target","value","className","s","phonebook","formPhoneBook","onSubmit","preventDefault","find","alert","actions","uuidv4","type","onChange","pattern","title","required","phoneBookButton","Contacts","contactListformat","contactList","map","contactItem__btn","onClick","handleDeleteContact","Filter","findcontacts","findInput","App","normalizedFilter","toLowerCase","cont","includes","getVisibleContacts","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.169aa140.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneBookButton\":\"phonebook_phoneBookButton__2F-Lr\",\"formPhoneBook\":\"phonebook_formPhoneBook__94Gnw\",\"phonebook\":\"phonebook_phonebook__3K5st\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem__btn\":\"contacts_contactItem__btn__mdf4X\",\"contactList\":\"contacts_contactList__1Ui5w\",\"contactListformat\":\"contacts_contactListformat__3TBy5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findcontacts\":\"filter_findcontacts__2jD_4\",\"findInput\":\"filter_findInput__RquXd\"};","import { configureStore, createSlice, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport { persistStore, persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst persistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter']\r\n  }\r\n\r\nconst initialState = { contacts: JSON.parse(window.localStorage.getItem('contacts')) ?? [], }\r\n\r\nexport const contactsSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState,\r\n  reducers: {\r\n    addContacts(state, action) {\r\n        return {...state, contacts:[...state.contacts, action.payload]};\r\n    },\r\n    deleteContact(state, action) {\r\n        return {...state, contacts:[...state.contacts.filter((state) => state.id !== action.payload)]};\r\n    },\r\n    filterContact(state, action) {\r\n        return {...state, filter: action.payload};\r\n    }\r\n   },\r\n})\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n    },\r\n  }),\r\n\r\n]\r\n\r\nconst store = configureStore({ reducer: \r\n    persistReducer(persistConfig, contactsSlice.reducer),\r\n    middleware,\r\n});\r\nconst persistor = persistStore(store)\r\n\r\nexport  { store, persistor };","import {React, useState} from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { contactsSlice } from '../../redux/store';\r\nimport s from './phonebook.module.css';\r\n\r\n\r\nconst Phonebook = () => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state) => state)\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const { contacts } = state\r\n\r\n  const handleChange = e => {\r\n    const {name, value} = e.target;\r\n   \r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n        \r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      \r\n      default:\r\n        return;   \r\n    }\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    \r\n    const result = contacts.find(state  => name === state.name ); \r\n    if(result){\r\n      alert(name + ` is already in contact`)\r\n    }\r\n    else {\r\n      dispatch(contactsSlice.actions.addContacts({name, number, id: uuidv4()}))\r\n    } \r\n    setName('')\r\n    setNumber('')\r\n  }\r\n\r\n  return (\r\n    <div className={s.phonebook}>\r\n    <h2>Phonebook</h2>\r\n    <div className={s.formPhoneBook}>\r\n    <p>Name</p>\r\n    <form onSubmit={handleSubmit}>    \r\n    <input\r\n      type=\"text\"\r\n      onChange={handleChange}  \r\n      name=\"name\" \r\n      value={name}\r\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n      required\r\n    />\r\n    <p>Number</p>\r\n    <input\r\n      type=\"tel\"\r\n      name=\"number\"\r\n      onChange={handleChange} \r\n      value={number} \r\n      pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n      title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n      required\r\n    />\r\n    <button type=\"submit\" className={s.phoneBookButton}>Add contact</button>\r\n    </form>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Phonebook\r\n","import {contactsSlice} from '../../redux/store'\r\nimport {useDispatch} from 'react-redux'\r\nimport s from './contacts.module.css';\r\n\r\nconst Contacts  = ({contacts}) => {\r\n    \r\n    const dispatch = useDispatch();\r\n    const handleDeleteContact = (id) => {\r\n        dispatch(contactsSlice.actions.deleteContact( id ))\r\n    };\r\n\r\n    return (\r\n        \r\n        <div className={s.contactListformat}>\r\n            <ul className={s.contactList}>\r\n            {contacts.map(({id,name,number})  => (\r\n                <li key={id}>\r\n                    {name}: { }\r\n                    {number}\r\n                    <button\r\n                        type=\"button\"\r\n                        className={s.contactItem__btn}\r\n                        onClick={() => handleDeleteContact(id)}>\r\n                        Удалить\r\n                    </button>\r\n                </li>\r\n            ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default  Contacts;","import {useDispatch} from 'react-redux'\r\nimport { contactsSlice } from '../../redux/store'; \r\nimport PropTypes from 'prop-types';\r\nimport s from './filter.module.css'\r\n\r\nconst Filter = () => {\r\n  \r\n  const dispatch = useDispatch();\r\n  const handleChange = e => {\r\n  const {value} = e.target;\r\n    dispatch(contactsSlice.actions.filterContact( (value)))\r\n  }  \r\n\r\n  return (\r\n    <>\r\n      <h2>Contacts</h2>\r\n      <label className={s.findcontacts}> \r\n        Find contacts by name\r\n        <input className={s.findInput} type=\"text\" name=\"filter\" onChange={handleChange} />\r\n      </label>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Filter;\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  handleChange: PropTypes.func,\r\n};\r\n","import {useSelector} from 'react-redux'\r\nimport Phonebook from './components/PhoneBook/phoneBook';\r\nimport Contacts from './components/Contacts/contacts';\r\nimport Filter from './components/Filter/filter';\r\nimport './App.css';\r\n\r\nexport default function App () {\r\n  const state = useSelector((state) => state)\r\n\r\n  const getVisibleContacts = () => {\r\n    if(state.filter){\r\n      const normalizedFilter = state.filter.toLowerCase();\r\n      return (state.contacts.filter(cont =>\r\n        cont.name.toLowerCase().includes(normalizedFilter),\r\n      ))\r\n    }\r\n    return (state.contacts)\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Phonebook />\r\n      <Filter />\r\n      <Contacts contacts={getVisibleContacts()} />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {store, persistor} from './redux/store'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport {Provider} from 'react-redux'\r\nimport App from './App';\r\nimport './index.css';\r\nimport 'normalize.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store= {store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}